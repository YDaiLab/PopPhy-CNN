library(e1071)
#library(randomForest)
#library(rfUtilities)
setwd("/Users/derek.reiman/Desktop/meta-signer/data/")
dir = "Obesity"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.05*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
library(devtools)
#install_github("vqv/ggbiplot")
#install_github("knights-lab/MWAS")
library(mlbench)
library(ggbiplot)
library(caret)
library(e1071)
#library(randomForest)
#library(rfUtilities)
setwd("/Users/derek.reiman/Desktop/meta-signer/data/")
dir = "Obesity"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.3*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
library(devtools)
#install_github("vqv/ggbiplot")
#install_github("knights-lab/MWAS")
library(mlbench)
library(ggbiplot)
library(caret)
library(e1071)
#library(randomForest)
#library(rfUtilities)
setwd("/Users/derek.reiman/Desktop/meta-signer/data/")
dir = "Obesity"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.3*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "svm",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
clusters <- hclust(log.abundance)
plot(clusters)
clusters <- hclust(dist(log.abundance))
plot(clusters)
clusters <- kmeans(log.abundance)
clusters <- kmeans(log.abundance, k=2)
clusters <- kmeans(log.abundance, centers=2)
clusters
sum(clusters == y)
sum(clusters$cluster == y)
y
sum(clusters$cluster == as.factor(y))
as.factor(y)
sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
sum2
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = clusters$cluster, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
dir = "Cirrhosis"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
library(devtools)
#install_github("vqv/ggbiplot")
library(mlbench)
library(ggbiplot)
library(caret)
library(e1071)
setwd("/Users/derek.reiman/Desktop/meta-signer/data/")
dir = "IBD"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
g <- ggplot2(pca$x, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
dir = "CRC"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
autoplot(pca)
library(ggplot2)
install.packages("ggfortify")
library(ggplot2)
library(ggfortify)
autoplot(pca)
autoplot(pca, colour = y)
autoplot(pca, colour = as.numeric(as.factor(y)))
autoplot(pca, data=log.abundance, colour = as.numeric(as.factor(y)))
y
setwd("/Users/derek.reiman/Desktop/meta-signer/data/")
dir = "Cirrhosis"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = y, ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
g <- ggbiplot(pca, obs.scale = 1, var.scale = 1,
groups = as.factor(clusters$cluster), ellipse = TRUE,
circle = TRUE)
g <- g + scale_color_discrete(name = '')
g <- g + theme(legend.direction = 'horizontal',
legend.position = 'top')
print(g)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
autoplot(pca)
print(model)
autoplot(pca, colours=as.numeric(as.factor(y)))
autoplot(pca, colour=as.numeric(as.factor(y)))
as.numeric(as.factor(y))
autoplot(pca, colour=as.factor(y))
autoplot(pca, colours=as.numeric(as.factor(y)))
data(iris)
df <- iris[c(1, 2, 3, 4)]
autoplot(prcomp(df))
autoplot(prcomp(df), data = iris, colour = 'Species')
iris['Species']
dir = "Cirrhosis"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
abundance_matrix = t(filt_df)
log.abundance = log(abundance_matrix+1)
pca <- prcomp(log.abundance, center=T, scale. = T)
log.abundance <- cbind(log.abundance, y)
autoplot(prcomp(df), data = iris, colour = 'Species')
autoplot(pca, data = log.abundance, colour = 'y')
y
log.abundance['y']
log.abundance[['y']]
log.abundance
log.abundance[y]
log.abundance[d]
log.abundance[y]
y
log.abundance[y]
log.abundance = log(abundance_matrix+1)
log.abundance <- cbind(log.abundance, y)
log.abundance[y]
log.abundance <- log(abundance_matrix+1)
log.abundance <- cbind(log.abundance, y)
log.abundance[y]
log.abundance
str(log.abundance)
row.names(log.abundance)
row.names(row.abundance)
column.names(log.abundance)
col.names(log.abundance)
colnames(log.abundance)
log.abundance[,224]
log.abundance <- log(abundance_matrix+1)
log.abundance[,224]
log.abundance <- cbind(log.abundance, as.character(y))
log.abundance[,224]
autoplot(pca, data=log.abundance, colour='y')
autoplot(pca, data=log.abundance, colour = 'y')
log.abundance[y]
log.abundance["Class"] <- y
log.abundance[,"Class"] <- y
log.abundance[["Class"]] <- y
log.abundance[["Class"]]
log.abundance["Class"]
log.abundance <- log(abundance_matrix+1)
str(log.abundance)
log.abundance <- as.data.frame(log(abundance_matrix+1))
str(log.abundance)
pca <- prcomp(log.abundance, center=T, scale. = T)
log.abundance
log.abundance["Class"] <- y
log.abundance["Class"]
autoplot(pca, data=log.abundance, colour='Class')
autoplot(pca, colour=y)
y
autoplot(pca, colour=as.character(y)
)
autoplot(pca, data=log.abundance, colour='Class')
dir = "Cirrhosis"
abundance = paste(dir, "abundance.tsv", sep="/")
labels = paste(dir, "labels.txt", sep="/")
df = read.table(abundance, sep="\t", row.names=1)
y = read.table(labels)[[1]]
num_sample = ncol(df)
filt_df = subset(df, rowSums(df != 0) > 0.1*num_sample)
abundance_matrix = t(filt_df)
log.abundance <- as.data.frame(log(abundance_matrix+1))
pca <- prcomp(log.abundance, center=T, scale. = T)
log.abundance["Class"] <- y
autoplot(pca, data=log.abundance, colour='Class')
clusters <- kmeans(log.abundance, centers=2)
sum1 <- sum(as.numeric(clusters$cluster) == as.numeric(as.factor(y)))
sum2 <- sum(as.numeric(clusters$cluster) != as.numeric(as.factor(y)))
if (sum1 > sum2){
acc = sum1/num_sample * 100
}
if (sum2 >= sum1){
acc = sum2/num_sample * 100
}
print("Cluster Accuracy")
print(acc)
log.abundance["Clusters"] <- clusters$cluster
autoplot(pca, data=log.abundance, colour='Cluster')
autoplot(pca, data=log.abundance, colour='Cluster')
clusters.cluster
log.abundance["Clusters"] <- as.factor(clusters$cluster)
autoplot(pca, data=log.abundance, colour='Cluster')
log.abundance["Clusters"] <- as.character(clusters$cluster)
autoplot(pca, data=log.abundance, colour='Cluster')
log.abundance['Cluster']
log.abundance["Clusters"] <- clusters$cluster
autoplot(pca, data=log.abundance, colour='Clusters')
log.abundance["Clusters"] <- as.character(clusters$cluster)
autoplot(pca, data=log.abundance, colour='Clusters')
log.abundance <- log.abundance[-c("Class", "Clusters")]
drops <- c("Class", "Clusters")
log.abundance <- log.abundance[ , !(names(log.abundance) %in% drops]
log.abundance <- log.abundance[ , !(names(log.abundance) %in% drops)]
log.abundance
names(log.abundance)
fitControl <-
trainControl(
method = "cv",
number = 10,
classProbs = T,
savePredictions = T
)
# Training with Random Forest ----------------------------------------------------------------
model <- train(log.abundance, y,
method = "rf",
trControl = fitControl,
metric = "Accuracy"
)
print(model)
